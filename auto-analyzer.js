/**
 * SYST√àME D'ANALYSE AUTOMATIQUE - D√âTECTION DE PDF
 * 
 * Ce script d√©tecte automatiquement quand un PDF est fourni et lance l'analyse
 * sans n√©cessiter d'instructions de l'utilisateur.
 */

// Fonction principale d'analyse automatique
async function analyzeDocumentAutomatically() {
    console.log("ü§ñ ANALYSE AUTOMATIQUE D√âCLENCH√âE");
    console.log("=" .repeat(40));
    
    // Simuler l'analyse du PDF fourni dans l'attachement
    // En r√©alit√©, le contenu sera fourni par GitHub Copilot
    
    const samplePdfContent = `
Programme Musical 2026

Ma r√©gion virtuose (25 minutes)
- Ammerland - Jacob de Haan - 03:10 - Tr√®s interessant pour le son mais assez ch√®re
- Music from How To Train Your Dragon - John Powell/arr. Sean O'Loughlin - 04:50 - Marche tr√®s bien, joviale
- The Lion King - John Higgins - 08:40 - Super pi√®ce
- Selections from The Nightmare Before Christmas - Elfman/arr. Brown - 05:12 - Excellent
- Allegretto from Symphony No. 7 - Beethoven/arr. Longfield - 03:00 - Bien arrang√©e, bien g√©rer la r√©partition

Concert du 11 avril avec Eric Aubier (1h)
- Aratunian - ARUTIUNIAN Alexander / arr. SCHYNS Jos√© - 16:00 - Pi√®ce compl√®te mais pas √©vident / v√©rifier le niveau
- Napoli - Hermann Bellstedt / arr. Donald Hunsberger - 6:00 - Impressionnant et √©l√©gant
- Carnaval de Venise - J.B. Arban/Hunsberger - 08:25 - Tr√®s grand public / show
- La Virgen de la Macarena - Arrangement David Marlatt - 03:00 - Pas encore convaincu
- The Mandalorian - Ludwig G√∂ransson/arr. Paul Murtha - 02:34 - Pi√®ce courte
- Eldorado - Thierry Deleruyelle - 10:20 - Challenge accessible

Programme f√™te de la musique (35-40 minutes)
- Begegnung - Kurt G√§ble
- Libertango - Astor Piazzola / arr. Tony Cheseaux

Pi√®ces qui n'ont pas trouv√© leur concert
- Oregon - Jacob de Haan - 09:09 - V√©rifier le niveau et l'int√©r√™t
- Danse Bacchanale Samson et Dalila, Op. 47 - Camille Saint-Sa√´ns / arr. L. Steiger - 07:20 - La pi√®ce est peut-√™tre trop dure.

Financement du projet avec Eric Aubier
[Tableau des financements identique]
    `;
    
    try {
        // 1. Analyser le nouveau document
        const analysisResult = window.PDFAnalyzer.analyzePDFText(samplePdfContent);
        console.log("üìä Analyse termin√©e - Confiance:", analysisResult.metadata.confidence + "%");
        
        // 2. Comparer avec la baseline
        const changes = window.PDFAnalyzer.compareWithBaseline(analysisResult);
        console.log("üîç Comparaison avec baseline termin√©e");
        
        // 3. G√©n√©rer le rapport automatiquement
        const report = window.PDFAnalyzer.generateAnalysisReport(analysisResult, changes);
        
        // 4. Afficher les r√©sultats
        displayAutomaticAnalysis(report, changes, analysisResult);
        
        // 5. Si des changements sont d√©tect√©s, les appliquer automatiquement
        if (hasSignificantChanges(changes)) {
            console.log("üîÑ Application automatique des changements...");
            await applyChangesAutomatically(changes);
        } else {
            console.log("‚úÖ Aucun changement significatif d√©tect√©");
        }
        
        return { success: true, changes, report };
        
    } catch (error) {
        console.error("‚ùå Erreur lors de l'analyse automatique:", error);
        return { success: false, error: error.message };
    }
}

// Fonction pour d√©terminer si les changements sont significatifs
function hasSignificantChanges(changes) {
    return changes.concerts.added.length > 0 || 
           changes.pieces.added.length > 0 || 
           changes.pieces.removed.length > 0 ||
           changes.pieces.modified.length > 0;
}

// Fonction pour afficher les r√©sultats de l'analyse
function displayAutomaticAnalysis(report, changes, analysisResult) {
    console.log("\nüìã RAPPORT D'ANALYSE AUTOMATIQUE");
    console.log("=" .repeat(35));
    console.log(report);
    
    // Cr√©er un √©l√©ment visuel temporaire pour montrer les r√©sultats
    const resultDiv = document.createElement('div');
    resultDiv.id = 'auto-analysis-result';
    resultDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        max-width: 400px;
        background: #f8f9fa;
        border: 2px solid #28a745;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 10000;
        font-family: system-ui, -apple-system, sans-serif;
        font-size: 14px;
        line-height: 1.4;
    `;
    
    const hasChanges = hasSignificantChanges(changes);
    
    resultDiv.innerHTML = `
        <div style="margin-bottom: 15px;">
            <h3 style="margin: 0 0 10px 0; color: #28a745;">
                ü§ñ Analyse Automatique
            </h3>
            <p style="margin: 0; color: #6c757d; font-size: 12px;">
                PDF analys√© en ${analysisResult.metadata.confidence}% de confiance
            </p>
        </div>
        
        ${hasChanges ? `
        <div style="margin-bottom: 15px;">
            <h4 style="margin: 0 0 8px 0; color: #dc3545;">üìù Changements d√©tect√©s:</h4>
            <ul style="margin: 0; padding-left: 20px; font-size: 12px;">
                ${changes.concerts.added.length > 0 ? `<li>${changes.concerts.added.length} nouveau(x) concert(s)</li>` : ''}
                ${changes.pieces.added.length > 0 ? `<li>${changes.pieces.added.length} nouvelle(s) pi√®ce(s)</li>` : ''}
                ${changes.pieces.removed.length > 0 ? `<li>${changes.pieces.removed.length} pi√®ce(s) supprim√©e(s)</li>` : ''}
                ${changes.pieces.modified.length > 0 ? `<li>${changes.pieces.modified.length} pi√®ce(s) modifi√©e(s)</li>` : ''}
            </ul>
        </div>
        ` : `
        <div style="margin-bottom: 15px;">
            <p style="margin: 0; color: #28a745;">
                ‚úÖ Aucun changement d√©tect√©
            </p>
        </div>
        `}
        
        <div style="text-align: center;">
            <button onclick="closeAnalysisResult()" style="
                background: #28a745;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
            ">Fermer</button>
        </div>
    `;
    
    document.body.appendChild(resultDiv);
    
    // Auto-suppression apr√®s 10 secondes
    setTimeout(() => {
        if (document.getElementById('auto-analysis-result')) {
            resultDiv.remove();
        }
    }, 10000);
}

// Fonction pour fermer le r√©sultat d'analyse
window.closeAnalysisResult = function() {
    const resultDiv = document.getElementById('auto-analysis-result');
    if (resultDiv) {
        resultDiv.remove();
    }
};

// Fonction pour appliquer automatiquement les changements
async function applyChangesAutomatically(changes) {
    console.log("üõ†Ô∏è Application des changements au site...");
    
    // Note: En pratique, cette fonction d√©clencherait les modifications
    // des fichiers HTML via les outils de GitHub Copilot
    
    let changesSummary = [];
    
    if (changes.concerts.added.length > 0) {
        changesSummary.push(`‚ûï ${changes.concerts.added.length} concert(s) ajout√©(s)`);
    }
    
    if (changes.pieces.added.length > 0) {
        changesSummary.push(`üéµ ${changes.pieces.added.length} pi√®ce(s) ajout√©e(s)`);
    }
    
    if (changes.pieces.removed.length > 0) {
        changesSummary.push(`üóëÔ∏è ${changes.pieces.removed.length} pi√®ce(s) supprim√©e(s)`);
    }
    
    if (changes.pieces.modified.length > 0) {
        changesSummary.push(`‚úèÔ∏è ${changes.pieces.modified.length} pi√®ce(s) modifi√©e(s)`);
    }
    
    console.log("‚úÖ Changements appliqu√©s:", changesSummary.join(', '));
    
    // Mettre √† jour la baseline
    window.DocumentProcessor.updateBaseline({
        ...window.BASELINE_DATA,
        concerts: changes.concerts.added.length > 0 ? 
            [...window.BASELINE_DATA.concerts, ...changes.concerts.added] : 
            window.BASELINE_DATA.concerts
    });
    
    showMessage("üìÑ Document analys√© et site mis √† jour automatiquement!", "success");
}

// D√©tection automatique au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    // V√©rifier s'il y a des indicateurs qu'un nouveau PDF a √©t√© fourni
    // Dans un contexte r√©el, cela serait d√©clench√© par GitHub Copilot
    
    // Simuler la d√©tection apr√®s 2 secondes pour les tests
    setTimeout(() => {
        console.log("üîç Recherche de nouveaux documents...");
        
        // En production, cette condition serait bas√©e sur de vrais indicateurs
        const shouldAnalyze = window.location.search.includes('analyze') || 
                             localStorage.getItem('trigger_analysis') === 'true';
        
        if (shouldAnalyze) {
            localStorage.removeItem('trigger_analysis');
            analyzeDocumentAutomatically();
        }
    }, 2000);
});

// Fonction publique pour d√©clencher l'analyse manuellement (pour les tests)
window.triggerAutomaticAnalysis = function() {
    console.log("üéØ D√©clenchement manuel de l'analyse automatique");
    analyzeDocumentAutomatically();
};

// Export pour utilisation externe
window.AutoAnalyzer = {
    analyzeDocumentAutomatically,
    displayAutomaticAnalysis,
    applyChangesAutomatically,
    hasSignificantChanges
};

console.log("ü§ñ Syst√®me d'analyse automatique initialis√©");
