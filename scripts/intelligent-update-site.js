#!/usr/bin/env node

/**
 * Script de mise √† jour intelligente du site web
 * Remplace compl√®tement les donn√©es existantes par les donn√©es Notion
 */

const fs = require('fs').promises;
const path = require('path');

class IntelligentSiteUpdater {
    constructor() {
        this.dataDir = path.join(__dirname, '..', 'data');
        this.indexPath = path.join(__dirname, '..', 'index.html');
        this.backupDir = path.join(this.dataDir, 'site-backups');
        
        // Mapping des bases de donn√©es Notion vers les sections du site
        this.sectionMapping = {
            'Ma r√©gion virtuose': 'ma-region-virtuose',
            'Concert du 11 d\'avril avec Eric Aubier': 'concert-eric-aubier',
            'Insertion dans les 60 ans du Conservatoire ': 'conservatoire-60-ans',
            'Retour Karaok√©': 'retour-karaoke',
            'Programme f√™te de la musique': 'fete-musique',
            'Loto': 'loto',
            'Pi√®ces d\'ajout sans direction': 'pieces-ajout',
            'Pi√®ces qui n\'ont pas trouv√© leur concert': 'pieces-orphelines'
        };
        
        // Titres fran√ßais des sections
        this.sectionTitles = {
            'ma-region-virtuose': 'Ma r√©gion virtuose',
            'concert-eric-aubier': 'Concert du 11 d\'avril avec Eric Aubier',
            'conservatoire-60-ans': 'Insertion dans les 60 ans du Conservatoire',
            'retour-karaoke': 'Retour Karaok√©',
            'fete-musique': 'Programme f√™te de la musique',
            'loto': 'Loto',
            'pieces-ajout': 'Pi√®ces d\'ajout sans direction',
            'pieces-orphelines': 'Pi√®ces qui n\'ont pas trouv√© leur concert'
        };
    }

    // Normalise les noms de bases de donn√©es pour g√©rer les diff√©rents types d'apostrophes
    normalizeDatabaseName(name) {
        // Remplace tous les types d'apostrophes par des apostrophes normales (39)
        return name.replace(/[\u2019\u2018\u201B\u0060\u00B4]/g, "'");
    }

    // Obtient la section correspondante √† une base de donn√©es
    getSectionForDatabase(databaseName) {
        const normalizedName = this.normalizeDatabaseName(databaseName);
        return this.sectionMapping[normalizedName] || 'nouvelles-pieces';
    }

    async updateSite() {
        console.log('üîÑ === MISE √Ä JOUR INTELLIGENTE DU SITE ===');
        
        try {
            // 1. Cr√©er une sauvegarde
            await this.createBackup();
            
            // 2. Charger les donn√©es Notion
            const notionData = await this.loadNotionData();
            
            // 3. Organiser les donn√©es par section
            const organizedData = this.organizeDataBySections(notionData);
            
            // 4. Lire le template HTML de base
            const baseHTML = await this.getBaseHTMLTemplate();
            
            // 5. G√©n√©rer le nouveau HTML complet
            const newHTML = await this.generateCompleteHTML(baseHTML, organizedData);
            
            // 6. Sauvegarder le nouveau HTML
            await fs.writeFile(this.indexPath, newHTML);
            
            console.log('‚úÖ Site mis √† jour avec succ√®s !');
            this.generateReport(organizedData);
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la mise √† jour:', error.message);
            throw error;
        }
    }

    async createBackup() {
        try {
            await fs.mkdir(this.backupDir, { recursive: true });
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupPath = path.join(this.backupDir, `index-intelligent-${timestamp}.html`);
            
            const currentHTML = await fs.readFile(this.indexPath, 'utf8');
            await fs.writeFile(backupPath, currentHTML);
            
            console.log(`üíæ Sauvegarde cr√©√©e: ${backupPath}`);
        } catch (error) {
            console.warn('‚ö†Ô∏è Impossible de cr√©er la sauvegarde:', error.message);
        }
    }

    async loadNotionData() {
        const data = { pieces: [] };
        
        try {
            const piecesPath = path.join(this.dataDir, 'pieces.json');
            const piecesData = await fs.readFile(piecesPath, 'utf8');
            data.pieces = JSON.parse(piecesData).pieces || [];
            
            console.log(`üìä ${data.pieces.length} pi√®ces charg√©es depuis Notion`);
        } catch (error) {
            console.warn('‚ö†Ô∏è Impossible de charger pieces.json:', error.message);
        }
        
        return data;
    }

    organizeDataBySections(notionData) {
        console.log('üóÇÔ∏è Organisation des donn√©es par sections...');
        
        const sections = {};
        
        // Initialiser toutes les sections
        Object.keys(this.sectionMapping).forEach(dbName => {
            const sectionId = this.sectionMapping[dbName];
            sections[sectionId] = {
                id: sectionId,
                title: this.sectionTitles[sectionId],
                pieces: [],
                database: dbName
            };
        });
        
        // R√©partir les pi√®ces dans les bonnes sections
        notionData.pieces.forEach(piece => {
            const dbName = piece.source?.database;
            
            if (dbName) {
                const sectionId = this.getSectionForDatabase(dbName);
                
                if (sectionId && sections[sectionId]) {
                    sections[sectionId].pieces.push(piece);
                    console.log(`üìã "${piece.title}" ‚Üí ${this.sectionTitles[sectionId]}`);
                } else {
                    console.warn(`‚ö†Ô∏è Pi√®ce orpheline: "${piece.title}" (DB: ${dbName})`);
                    // Mettre dans "pi√®ces orphelines" par d√©faut
                    sections['pieces-orphelines'].pieces.push(piece);
                }
            } else {
                console.log(`‚ö†Ô∏è  Pas de base de donn√©es pour "${piece.title}"`);
                sections['pieces-orphelines'].pieces.push(piece);
            }
        });
        
        // Trier les pi√®ces dans chaque section par ordre d√©fini dans Notion (colonne "Ordre")
        Object.values(sections).forEach(section => {
            if (section.pieces.length > 0) {
                section.pieces.sort((a, b) => {
                    const orderA = a.source?.order;
                    const orderB = b.source?.order;
                    
                    // Si les deux ont un ordre d√©fini, trier par ordre
                    if (orderA !== null && orderA !== undefined && orderB !== null && orderB !== undefined) {
                        return orderA - orderB;
                    }
                    
                    // Si seul A a un ordre, A vient en premier
                    if (orderA !== null && orderA !== undefined) {
                        return -1;
                    }
                    
                    // Si seul B a un ordre, B vient en premier
                    if (orderB !== null && orderB !== undefined) {
                        return 1;
                    }
                    
                    // Si aucun n'a d'ordre, fallback sur date de modification
                    const dateA = a.source?.lastModified || a.source?.pageId || '0';
                    const dateB = b.source?.lastModified || b.source?.pageId || '0';
                    return dateA.localeCompare(dateB);
                });
                
                const orderedCount = section.pieces.filter(p => p.source?.order !== null && p.source?.order !== undefined).length;
                console.log(`‚úÖ ${section.title}: ${section.pieces.length} pi√®ce(s) - ${orderedCount} avec ordre personnalis√©`);
            }
        });
        
        return sections;
    }

    async getBaseHTMLTemplate() {
        // Template HTML de base propre
        return `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Programme Musical 2026</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <div class="header-content">
            <h1>Programme Musical 2026</h1>
            <div id="site-stats" class="site-statistics">
                <!-- Les statistiques seront mises √† jour automatiquement par JavaScript -->
            </div>
        </div>
    </header>

    <!-- Navigation par onglets -->
    <nav class="tab-navigation">
        <div class="tab-container">
            <div class="tab-buttons">
                <button class="tab-button active" data-tab="programmes">üìö Programmes Musicaux</button>
                <button class="tab-button" data-tab="partitions">üéº Partitions</button>
            </div>
            <div class="search-container">
                <input type="text" id="search-input" placeholder="Rechercher une pi√®ce, un compositeur..." class="search-input">
            </div>
        </div>
    </nav>

    <main>
        <!-- Section Programmes -->
        <div id="programmes" class="tab-content active">
            {{SECTIONS_CONTENT}}
        </div>

        <!-- Section Partitions -->
        <div id="partitions" class="tab-content">
            <section class="partitions-section">
                <h2>üéº Partitions du Programme Musical 2026</h2>
                <div class="partitions-content">
                    <div class="partitions-intro">
                        <p>Toutes les partitions sont disponibles en t√©l√©chargement libre pour les membres de l'orchestre.</p>
                        <div class="google-drive-link">
                            <a href="https://drive.google.com/drive/folders/1example" target="_blank" class="drive-button">
                                üìÅ Acc√©der au Drive des Partitions
                            </a>
                        </div>
                    </div>
                    
                    <div class="copyright-notice">
                        <h3>‚öñÔ∏è Droits d'auteur et utilisation</h3>
                        <p>Les partitions pr√©sentes dans ce drive sont prot√©g√©es par le droit d'auteur. 
                        Leur utilisation est strictement r√©serv√©e aux membres de l'orchestre dans le cadre 
                        des r√©p√©titions et concerts du programme 2026. Si je suis membre de l'orchestre, 
                        je m'engage √† respecter ces conditions d'utilisation.</p>
                    </div>
                </div>
            </section>
        </div>
    </main>

    <!-- Modale vid√©o YouTube -->
    <div id="video-modal" class="video-modal">
        <div class="video-modal-wrapper">
            <div class="video-controls">
                <button id="audio-mode-btn" class="control-btn" title="Mode audio uniquement">üéß</button>
                <button id="close-modal-btn" class="control-btn" title="Fermer">‚úï</button>
            </div>
            <div class="video-modal-content">
                <div class="video-container">
                    <iframe id="youtube-player" 
                            width="100%" 
                            height="100%" 
                            frameborder="0" 
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                            allowfullscreen>
                    </iframe>
                </div>
            </div>
        </div>
    </div>

    <!-- Mini-lecteur audio en bas -->
    <div id="audio-player" class="audio-player">
        <div class="audio-player-content">
            <div class="audio-info">
                <span id="audio-title">Titre de la pi√®ce</span>
                <span id="audio-title-floating" style="display: none;">Titre de la pi√®ce</span>
            </div>
            <div class="audio-controls">
                <button id="show-video-btn" class="audio-control-btn" title="Afficher la vid√©o">‚ñ∂</button>
                <button id="stop-audio-btn" class="audio-control-btn" title="Arr√™ter">‚èπ</button>
            </div>
        </div>
    </div>

    <!-- Biblioth√®que jsPDF pour la g√©n√©ration de PDF -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    
    <!-- Script original pour les fonctionnalit√©s -->
    <script src="script.js"></script>
</body>
</html>`;
    }

    generateCompleteHTML(baseHTML, sections) {
        let sectionsHTML = '';
        
        // G√©n√©rer chaque section avec ses pi√®ces
        Object.values(sections).forEach(section => {
            if (section.pieces.length > 0) {
                sectionsHTML += this.generateSectionHTML(section);
            }
        });
        
        // Remplacer le placeholder
        return baseHTML.replace('{{SECTIONS_CONTENT}}', sectionsHTML);
    }

    generateSectionHTML(section) {
        const piecesHTML = section.pieces.map(piece => this.generatePieceHTML(piece)).join('\n                ');
        
        // Calculer la dur√©e totale de cette section
        let totalSeconds = 0;
        section.pieces.forEach(piece => {
            if (piece.duration) {
                const timeComponents = piece.duration.split(':');
                if (timeComponents.length >= 2) {
                    const minutes = parseInt(timeComponents[0]) || 0;
                    const seconds = parseInt(timeComponents[1]) || 0;
                    totalSeconds += minutes * 60 + seconds;
                }
            }
        });
        
        // Formater la dur√©e
        const formatTime = (seconds) => {
            const h = Math.floor(seconds / 3600);
            const m = Math.floor((seconds % 3600) / 60);
            const s = seconds % 60;
            if (h > 0) {
                return `${h}h ${m.toString().padStart(2, '0')}min`;
            } else if (m > 0) {
                return `${m}min ${s > 0 ? s.toString().padStart(2, '0') + 's' : ''}`;
            } else {
                return `${s}s`;
            }
        };
        
        const totalTimeDisplay = totalSeconds > 0 ? formatTime(totalSeconds) : '';
        
        return `
        <!-- ${section.title} -->
        <section id="${section.id}" class="concert-section">
            <div class="section-header">
                <h2>${section.title}</h2>
                <button class="pdf-download-btn" data-section="${section.id}" title="T√©l√©charger ce programme en PDF">
                    üìÑ T√©l√©charger PDF
                </button>
            </div>
            <div class="pieces-grid">
                ${piecesHTML}
            </div>
            <div class="section-summary">
                <div class="summary-stats">
                    <span class="stat-pieces">${section.pieces.length} pi√®ce${section.pieces.length > 1 ? 's' : ''}</span>
                    ${totalTimeDisplay ? `<span class="stat-duration">${totalTimeDisplay}</span>` : ''}
                </div>
            </div>
        </section>
`;
    }

    generatePieceHTML(piece) {
        const linksHTML = [];
        
        if (piece.links) {
            if (piece.links.audio) {
                linksHTML.push(`<a href="${piece.links.audio}" target="_blank" title="Arrangement audio">üéµ Audio</a>`);
            }
            if (piece.links.original) {
                linksHTML.push(`<a href="${piece.links.original}" target="_blank" title="≈íuvre originale">üé¨ Original</a>`);
            }
            if (piece.links.purchase) {
                linksHTML.push(`<a href="${piece.links.purchase}" target="_blank" title="Lien d'achat">üõí Achat</a>`);
            }
        }
        
        return `<div class="piece-card">
                    <h3>${piece.title}</h3>
                    ${piece.composer ? `<p><strong>Compositeur:</strong> ${piece.composer}</p>` : ''}
                    ${piece.duration ? `<p><strong>Dur√©e:</strong> ${piece.duration}</p>` : ''}
                    ${piece.info ? `<p><strong>Info:</strong> ${piece.info}</p>` : ''}
                    ${linksHTML.length > 0 ? `<div class="links">
                        ${linksHTML.join('\n                        ')}
                    </div>` : ''}
                </div>`;
    }

    generateReport(sections) {
        console.log('\nüìä === RAPPORT DE MISE √Ä JOUR INTELLIGENTE ===');
        console.log(`üìÖ Date: ${new Date().toLocaleString('fr-FR')}`);
        
        let totalPieces = 0;
        let sectionsWithData = 0;
        
        Object.values(sections).forEach(section => {
            if (section.pieces.length > 0) {
                console.log(`üé≠ ${section.title}: ${section.pieces.length} pi√®ce(s)`);
                totalPieces += section.pieces.length;
                sectionsWithData++;
            }
        });
        
        console.log(`\n‚úÖ ${sectionsWithData} section(s) avec donn√©es`);
        console.log(`üéµ ${totalPieces} pi√®ce(s) au total`);
        console.log('üåê Site web r√©g√©n√©r√© compl√®tement');
        console.log('üîÑ Toutes les donn√©es sont maintenant synchronis√©es avec Notion');
        console.log('=====================================\n');
    }
}

// Fonction principale
async function main() {
    const updater = new IntelligentSiteUpdater();
    await updater.updateSite();
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = IntelligentSiteUpdater;
