#!/usr/bin/env node

/**
 * üîß CONFIGURATION GITHUB PAGES POUR NOTION
 * 
 * Solution maintenable qui :
 * 1. Configure GitHub Pages pour servir les fichiers JSON
 * 2. Optimise le JavaScript pour charger les donn√©es Notion
 * 3. Garde le code s√©par√© et maintenable
 */

const fs = require('fs').promises;
const path = require('path');

class GitHubPagesOptimizer {
    constructor() {
        this.rootDir = path.join(__dirname, '..');
    }

    async optimize() {
        try {
            console.log('üîß === OPTIMISATION GITHUB PAGES POUR NOTION ===');
            
            // 1. Cr√©er/v√©rifier le fichier _config.yml pour GitHub Pages
            await this.createGitHubPagesConfig();
            
            // 2. Cr√©er le fichier .nojekyll (important pour GitHub Pages)
            await this.createNoJekyllFile();
            
            // 3. Optimiser le JavaScript pour charger les donn√©es
            await this.optimizeJavaScriptDataLoading();
            
            // 4. V√©rifier la structure des donn√©es
            await this.verifyDataStructure();
            
            console.log('‚úÖ GitHub Pages optimis√© pour Notion !');
            console.log('üåê Votre site devrait maintenant fonctionner en production');
            
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'optimisation:', error.message);
            throw error;
        }
    }

    async createGitHubPagesConfig() {
        const configPath = path.join(this.rootDir, '_config.yml');
        
        const config = `# Configuration GitHub Pages pour Programme Musical 2026
title: Programme Musical 2026
description: Site web avec synchronisation Notion automatique

# Inclure les fichiers JSON dans la publication
include:
  - data/*.json
  - "*.json"

# Configuration pour servir les fichiers JSON avec le bon Content-Type
plugins:
  - jekyll-optional-front-matter

# Pas de traitement Jekyll pour les fichiers statiques
exclude:
  - node_modules/
  - scripts/
  - README.md
  - package*.json
  - deploy.log

# Configuration des types MIME
defaults:
  - scope:
      path: "data"
    values:
      layout: null
      sitemap: false`;

        await fs.writeFile(configPath, config);
        console.log('‚úÖ _config.yml cr√©√© pour GitHub Pages');
    }

    async createNoJekyllFile() {
        const nojekyllPath = path.join(this.rootDir, '.nojekyll');
        await fs.writeFile(nojekyllPath, '');
        console.log('‚úÖ .nojekyll cr√©√© (d√©sactive Jekyll)');
    }

    async optimizeJavaScriptDataLoading() {
        const scriptPath = path.join(this.rootDir, 'script.js');
        let scriptContent = await fs.readFile(scriptPath, 'utf8');
        
        // Ajouter une fonction robuste de chargement des donn√©es Notion
        const notionLoaderCode = `
// üéµ CHARGEUR DE DONN√âES NOTION ROBUSTE
class NotionDataLoader {
    constructor() {
        this.cache = new Map();
        this.baseUrl = window.location.origin + window.location.pathname.replace('/index.html', '');
    }

    async loadData(fileName, fallback = []) {
        if (this.cache.has(fileName)) {
            return this.cache.get(fileName);
        }

        const urls = [
            \`\${this.baseUrl}/data/\${fileName}\`,
            \`./data/\${fileName}\`,
            \`/data/\${fileName}\`,
            \`data/\${fileName}\`
        ];

        for (const url of urls) {
            try {
                console.log(\`üîÑ Tentative de chargement: \${url}\`);
                const response = await fetch(url + '?t=' + Date.now());
                
                if (response.ok) {
                    const data = await response.json();
                    this.cache.set(fileName, data);
                    console.log(\`‚úÖ Donn√©es charg√©es depuis: \${url}\`);
                    return data;
                }
            } catch (error) {
                console.warn(\`‚ö†Ô∏è √âchec \${url}:\`, error.message);
            }
        }

        console.warn(\`‚ö†Ô∏è Impossible de charger \${fileName}, utilisation du fallback\`);
        return fallback;
    }

    async loadPieces() {
        const data = await this.loadData('pieces.json', { pieces: [] });
        return data.pieces || [];
    }

    async loadEvents() {
        const data = await this.loadData('events.json', { events: [] });
        return data.events || [];
    }

    async loadConcerts() {
        const data = await this.loadData('concerts.json', { concerts: [] });
        return data.concerts || [];
    }
}

// Instance globale du chargeur
window.notionLoader = new NotionDataLoader();

// üîÑ FONCTION DE CHARGEMENT DES DONN√âES NOTION AM√âLIOR√âE
async function loadNotionDataRobust() {
    try {
        console.log('üéµ Chargement des donn√©es Notion...');
        
        // Charger toutes les donn√©es en parall√®le
        const [pieces, events, concerts] = await Promise.all([
            window.notionLoader.loadPieces(),
            window.notionLoader.loadEvents(),
            window.notionLoader.loadConcerts()
        ]);

        console.log(\`‚úÖ Donn√©es Notion charg√©es: \${pieces.length} pi√®ces, \${events.length} √©v√©nements, \${concerts.length} concerts\`);
        
        // Mettre √† jour l'affichage
        if (pieces.length > 0) {
            updateConcertsWithNotionData(pieces);
        }
        
        if (events.length > 0) {
            updateEventsWithNotionData(events);
        }

        return { pieces, events, concerts };

    } catch (error) {
        console.error('‚ùå Erreur chargement donn√©es Notion:', error);
        return { pieces: [], events: [], concerts: [] };
    }
}

// üé≠ MISE √Ä JOUR DES CONCERTS AVEC DONN√âES NOTION
function updateConcertsWithNotionData(pieces) {
    // Organiser les pi√®ces par sections
    const sections = organizePiecesBySections(pieces);
    
    // Mettre √† jour chaque section
    Object.values(sections).forEach(section => {
        if (section.pieces.length > 0) {
            updateSectionDisplay(section);
        }
    });
}

function organizePiecesBySections(pieces) {
    const sections = {};
    
    const sectionMapping = {
        'Ma r√©gion virtuose': 'ma-region-virtuose',
        'Concert du 11 d\\'avril avec Eric Aubier': 'concert-eric-aubier',
        'Insertion dans les 60 ans du Conservatoire ': 'conservatoire-60-ans',
        'Retour Karaok√©': 'retour-karaoke',
        'Programme f√™te de la musique': 'fete-musique',
        'Loto': 'loto',
        'Pi√®ces d\\'ajout sans direction': 'pieces-ajout',
        'Pi√®ces qui n\\'ont pas trouv√© leur concert': 'pieces-orphelines'
    };
    
    // Initialiser les sections
    Object.entries(sectionMapping).forEach(([dbName, sectionId]) => {
        sections[sectionId] = {
            id: sectionId,
            title: dbName,
            pieces: []
        };
    });
    
    // R√©partir les pi√®ces
    pieces.forEach(piece => {
        const dbName = piece.source?.database;
        if (dbName) {
            const normalizedName = dbName.replace(/[\u2019\u2018\u201B\u0060\u00B4]/g, "'");
            const sectionId = sectionMapping[normalizedName] || 'pieces-orphelines';
            
            if (sections[sectionId]) {
                sections[sectionId].pieces.push(piece);
            }
        }
    });
    
    return sections;
}

function updateSectionDisplay(section) {
    const sectionElement = document.getElementById(section.id);
    if (!sectionElement) {
        console.warn(\`‚ö†Ô∏è Section \${section.id} non trouv√©e dans le DOM\`);
        return;
    }
    
    const piecesGrid = sectionElement.querySelector('.pieces-grid');
    if (piecesGrid) {
        // Vider la grille actuelle
        piecesGrid.innerHTML = '';
        
        // Ajouter les nouvelles pi√®ces
        section.pieces.forEach(piece => {
            const pieceElement = createPieceElement(piece);
            piecesGrid.appendChild(pieceElement);
        });
        
        console.log(\`‚úÖ Section \${section.title}: \${section.pieces.length} pi√®ces mises √† jour\`);
    }
}

function createPieceElement(piece) {
    const div = document.createElement('div');
    div.className = 'piece-card';
    
    let linksHTML = '';
    if (piece.links) {
        const links = [];
        if (piece.links.audio) links.push(\`<a href="\${piece.links.audio}" target="_blank" title="Arrangement audio">üéµ Audio</a>\`);
        if (piece.links.original) links.push(\`<a href="\${piece.links.original}" target="_blank" title="≈íuvre originale">üé¨ Original</a>\`);
        if (piece.links.purchase) links.push(\`<a href="\${piece.links.purchase}" target="_blank" title="Lien d'achat">üõí Achat</a>\`);
        
        if (links.length > 0) {
            linksHTML = \`<div class="links">\${links.join(' ')}</div>\`;
        }
    }
    
    div.innerHTML = \`
        <h3>\${piece.title}</h3>
        \${piece.composer ? \`<p><strong>Compositeur:</strong> \${piece.composer}</p>\` : ''}
        \${piece.duration ? \`<p><strong>Dur√©e:</strong> \${piece.duration}</p>\` : ''}
        \${piece.info ? \`<p><strong>Info:</strong> \${piece.info}</p>\` : ''}
        \${linksHTML}
    \`;
    
    return div;
}

// üé≠ MISE √Ä JOUR DES √âV√âNEMENTS AVEC DONN√âES NOTION
function updateEventsWithNotionData(events) {
    // Mettre √† jour l'affichage des √©v√©nements
    console.log(\`üóìÔ∏è Mise √† jour de \${events.length} √©v√©nements\`);
    // Impl√©mentation selon votre structure HTML existante
}
`;

        // Chercher o√π ins√©rer le code (apr√®s le DOMContentLoaded existant)
        const insertPosition = scriptContent.indexOf('// Attendre que le DOM soit charg√©');
        if (insertPosition !== -1) {
            scriptContent = scriptContent.slice(0, insertPosition) + 
                          notionLoaderCode + '\n\n' + 
                          scriptContent.slice(insertPosition);
        } else {
            // Si pas trouv√©, ajouter au d√©but
            scriptContent = notionLoaderCode + '\n\n' + scriptContent;
        }

        // Modifier l'initialisation pour inclure le chargement Notion
        scriptContent = scriptContent.replace(
            'initNotionSync();',
            `initNotionSync();
        
        // Charger les donn√©es Notion de fa√ßon robuste
        loadNotionDataRobust().then(data => {
            console.log('üéµ Donn√©es Notion int√©gr√©es au site:', data);
        }).catch(error => {
            console.warn('‚ö†Ô∏è Chargement Notion √©chou√©, site fonctionne avec donn√©es statiques');
        });`
        );

        await fs.writeFile(scriptPath, scriptContent);
        console.log('‚úÖ JavaScript optimis√© pour GitHub Pages');
    }

    async verifyDataStructure() {
        const dataDir = path.join(this.rootDir, 'data');
        
        try {
            const files = await fs.readdir(dataDir);
            console.log('üìä Fichiers de donn√©es disponibles:', files.filter(f => f.endsWith('.json')));
            
            // V√©rifier que les fichiers JSON sont valides
            for (const file of files) {
                if (file.endsWith('.json') && !file.includes('backup-')) {
                    try {
                        const content = await fs.readFile(path.join(dataDir, file), 'utf8');
                        JSON.parse(content);
                        console.log(`‚úÖ ${file}: JSON valide`);
                    } catch (error) {
                        console.warn(`‚ö†Ô∏è ${file}: JSON invalide -`, error.message);
                    }
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Erreur lecture dossier data:', error.message);
        }
    }
}

// Fonction principale
async function main() {
    const optimizer = new GitHubPagesOptimizer();
    await optimizer.optimize();
    
    console.log('\nüéØ === SOLUTION MAINTENABLE MISE EN PLACE ===');
    console.log('‚úÖ Configuration GitHub Pages optimis√©e');
    console.log('‚úÖ JavaScript robuste pour chargement donn√©es');
    console.log('‚úÖ Structure maintenable pr√©serv√©e');
    console.log('‚úÖ S√©paration code/donn√©es respect√©e');
    console.log('\nüí° Votre site va maintenant charger les donn√©es Notion en production !');
    console.log('=====================================\n');
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = GitHubPagesOptimizer;
