/**
 * UTILITAIRES POUR L'ANALYSE AUTOMATIQUE DE DOCUMENTS
 * 
 * Ce fichier contient les fonctions que GitHub Copilot utilise pour analyser
 * automatiquement les nouveaux documents PDF et appliquer les changements au site.
 */

// Fonction principale pour traiter un nouveau document
async function processNewDocument(pdfText, filename = "nouveau-document.pdf") {
    console.log("üîÑ Traitement du nouveau document:", filename);
    
    try {
        // 1. Analyser le nouveau document
        const analysisResult = window.PDFAnalyzer.analyzePDFText(pdfText);
        console.log("üìä Analyse termin√©e, confiance:", analysisResult.metadata.confidence + "%");
        
        // 2. Comparer avec la baseline
        const changes = window.PDFAnalyzer.compareWithBaseline(analysisResult);
        console.log("üîç Comparaison termin√©e");
        
        // 3. G√©n√©rer le rapport
        const report = window.PDFAnalyzer.generateAnalysisReport(analysisResult, changes);
        console.log("üìÑ Rapport g√©n√©r√©");
        
        // 4. Retourner les r√©sultats pour application manuelle
        return {
            success: true,
            analysis: analysisResult,
            changes: changes,
            report: report,
            recommendations: generateUpdateRecommendations(changes)
        };
        
    } catch (error) {
        console.error("‚ùå Erreur lors du traitement:", error);
        return {
            success: false,
            error: error.message,
            report: "√âchec de l'analyse du document"
        };
    }
}

// G√©n√©rer des recommandations de mise √† jour sp√©cifiques
function generateUpdateRecommendations(changes) {
    const recommendations = [];
    
    // Recommandations pour nouveaux concerts
    if (changes.concerts.added.length > 0) {
        recommendations.push({
            type: "ADD_CONCERT",
            action: "Ajouter une nouvelle section de concert",
            data: changes.concerts.added,
            priority: "HIGH"
        });
    }
    
    // Recommandations pour nouvelles pi√®ces
    if (changes.pieces.added.length > 0) {
        recommendations.push({
            type: "ADD_PIECES",
            action: "Ajouter de nouvelles pi√®ces musicales",
            data: changes.pieces.added,
            priority: "HIGH"
        });
    }
    
    // Recommandations pour suppressions
    if (changes.pieces.removed.length > 0) {
        recommendations.push({
            type: "REMOVE_PIECES",
            action: "Supprimer des pi√®ces musicales",
            data: changes.pieces.removed,
            priority: "MEDIUM"
        });
    }
    
    // Recommandations pour modifications
    if (changes.pieces.modified.length > 0) {
        recommendations.push({
            type: "UPDATE_PIECES",
            action: "Mettre √† jour les informations des pi√®ces",
            data: changes.pieces.modified,
            priority: "MEDIUM"
        });
    }
    
    return recommendations;
}

// Fonction pour formater les changements en instructions HTML
function formatHtmlInstructions(changes) {
    const instructions = [];
    
    // Instructions pour ajouter des concerts
    changes.concerts.added.forEach(concert => {
        instructions.push({
            type: "html",
            action: "add_section",
            location: "before_empty_sections",
            content: generateConcertHtml(concert)
        });
    });
    
    // Instructions pour ajouter des pi√®ces
    changes.pieces.added.forEach(piece => {
        instructions.push({
            type: "html",
            action: "add_piece",
            location: `section#${piece.concertId} .pieces-grid`,
            content: generatePieceHtml(piece)
        });
    });
    
    // Instructions pour supprimer des pi√®ces
    changes.pieces.removed.forEach(piece => {
        instructions.push({
            type: "html",
            action: "remove_piece",
            selector: `section#${piece.concertId} .piece-card:has(h3:contains("${piece.title}"))`
        });
    });
    
    return instructions;
}

// G√©n√©rer le HTML pour un nouveau concert
function generateConcertHtml(concert) {
    const piecesHtml = concert.pieces.map(piece => generatePieceHtml(piece)).join('\n');
    
    return `
        <!-- ${concert.title} -->
        <section id="${concert.id}" class="concert-section">
            <div class="section-header">
                <h2>${concert.title}${concert.duration ? ` (${concert.duration})` : ''}</h2>
                <button class="pdf-download-btn" data-section="${concert.id}" title="T√©l√©charger ce programme en PDF">
                    üìÑ T√©l√©charger PDF
                </button>
            </div>
            <div class="pieces-grid">
                ${piecesHtml}
            </div>
        </section>
    `;
}

// G√©n√©rer le HTML pour une nouvelle pi√®ce
function generatePieceHtml(piece) {
    const linksHtml = generateLinksHtml(piece.links);
    
    return `
                <div class="piece-card">
                    <h3>${piece.title}</h3>
                    ${piece.composer ? `<p><strong>Compositeur:</strong> ${piece.composer}</p>` : ''}
                    ${piece.duration ? `<p><strong>Dur√©e:</strong> ${piece.duration}</p>` : ''}
                    ${piece.info ? `<p><strong>Info:</strong> ${piece.info}</p>` : ''}
                    ${linksHtml ? `<div class="links">${linksHtml}</div>` : ''}
                </div>
    `;
}

// G√©n√©rer le HTML pour les liens
function generateLinksHtml(links) {
    if (!links || Object.keys(links).length === 0) return '';
    
    const linkTypes = {
        audio: 'üéµ Audio',
        original: 'üé¨ Original',
        purchase: 'üõí Achat',
        video: 'üé¨ Vid√©o'
    };
    
    return Object.entries(links)
        .filter(([type, url]) => url)
        .map(([type, url]) => {
            const label = linkTypes[type] || `üîó ${type}`;
            return `<a href="${url}" target="_blank">${label}</a>`;
        })
        .join('\n                        ');
}

// Fonction pour sauvegarder la nouvelle baseline apr√®s mise √† jour
function updateBaseline(newData) {
    // Mettre √† jour les m√©tadonn√©es
    newData.metadata = {
        ...window.BASELINE_DATA.metadata,
        version: incrementVersion(window.BASELINE_DATA.metadata.version),
        lastUpdate: new Date().toISOString()
    };
    
    // Remplacer la baseline actuelle
    window.BASELINE_DATA = newData;
    
    console.log("‚úÖ Baseline mise √† jour vers la version", newData.metadata.version);
    
    return newData;
}

// Incr√©menter le num√©ro de version
function incrementVersion(currentVersion) {
    const [major, minor, patch] = currentVersion.split('.').map(Number);
    return `${major}.${minor}.${patch + 1}`;
}

// Fonction de test pour valider le syst√®me
function testAnalysisSystem() {
    console.log("üß™ Test du syst√®me d'analyse...");
    
    // Test avec les donn√©es actuelles
    const testResult = window.PDFAnalyzer.compareWithBaseline(window.BASELINE_DATA);
    console.log("R√©sultat du test:", testResult);
    
    if (testResult.concerts.added.length === 0 && 
        testResult.pieces.added.length === 0 && 
        testResult.concerts.removed.length === 0 && 
        testResult.pieces.removed.length === 0) {
        console.log("‚úÖ Syst√®me fonctionnel - aucun changement d√©tect√© (normal)");
        return true;
    } else {
        console.log("‚ö†Ô∏è Changements d√©tect√©s lors du test de coh√©rence");
        return false;
    }
}

// Initialiser les outils d'analyse au chargement
document.addEventListener('DOMContentLoaded', function() {
    // Attendre que tous les scripts soient charg√©s
    setTimeout(() => {
        if (window.BASELINE_DATA && window.PDFAnalyzer) {
            console.log("üöÄ Syst√®me d'analyse automatique pr√™t");
            console.log("üìä Baseline version:", window.BASELINE_DATA.metadata.version);
            console.log("üìÖ Derni√®re mise √† jour:", new Date(window.BASELINE_DATA.metadata.lastUpdate).toLocaleString('fr-FR'));
            
            // Test de coh√©rence
            testAnalysisSystem();
        } else {
            console.error("‚ùå Erreur: Syst√®me d'analyse non initialis√© correctement");
        }
    }, 500);
});

// Exporter les fonctions pour utilisation dans la console si n√©cessaire
window.DocumentProcessor = {
    processNewDocument,
    generateUpdateRecommendations,
    formatHtmlInstructions,
    updateBaseline,
    testAnalysisSystem
};

console.log("‚öôÔ∏è Utilitaires d'analyse automatique charg√©s");
